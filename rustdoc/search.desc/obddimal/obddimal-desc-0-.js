searchState.loadedDescShard("obddimal", 0, "Shortcut for\nBDD building from CNF\nThe Apply operator\nAll BDD building and manipulation functionality\nModule containing type definitions for the elements of the …\nImplementation of dynamic variable ordering techniques\nThe ITE operator\nAn operation allowing to modify all nodes belonging to …\nOptions for BDD building\nUtility functions related to variable order\nBDD reduction\nBDD slicing\nImplementation of BDD layer swap\nEnum representing the Operations apply can apply.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nContainer combining the nodes list, unique tables, …\nInsert Node. ID is assigned for nonterminal nodes (var != …\nDetermine order in which clauses should be added to BDD\nComputed Table for Apply: maps (op,u,v) to apply(op,u,v)\nInitialize the BDD with zero and one constant nodes\nRemoves nodes which do not belong to any of the BDDs for …\nConverts a BCDD to a normal BDD\nCreates a HashTable containing the nodes of a BDD …\nCreates a HashMap containing the node IDs for each layer.\nCreates a HashMap containing information about the parents …\nCreates a slice of a BDD containing only the given …\nCreates a slice of a BDD containing all except the given …\nCreates slices of BDDs containing only the given variables.\nCreates slices of BDDs containing all except the given …\nEnsure var2level vec is valid up to specified variable\nExistential quantification, but on multiple BDDs at the …\nUniversal quantification, but on multiple BDDs at the same …\nReturns the argument unchanged.\nBuilds a BDD from a CNF read from DIMACS.\nGet the id of the BDD Manager (mostly relevant for …\nAdd a view to the BDD Manager\nReturns a set containing all nodes reachable from the …\nGet all root nodes for this BDD Manager\nGet all views for this BDD Manager\nGenerate graphviz for the provided function, not including …\nID to identify the DDManager\nCalls <code>U::from(self)</code>.\nComputed Table for ITE: maps (f,g,h) to ite(f,g,h)\nUnique Table for each variable. Note that the indices into …\nLoads a BDD from a Nodelist (containing all nodes from a …\nLoads a BDD from a Nodelist (containing all nodes from a …\nReads a (multi-rooted) BDD from a .bdd file.\nReads a (multi-rooted) BDD from a .bdd.json file.\nReads a (multi-rooted) BDD and corresponding statistics …\nReads a (multi-rooted) BDD and corresponding statistics …\nReads a (multi-rooted) BDD and corresponding statistics …\nReads a (multi-rooted) BDD from a .bdd.xml file.\nReads a (multi-rooted) BDD and corresponding statistics …\nReads a (multi-rooted) BDD from a .dddmp file.\nFind top variable: Highest in tree according to order\nModifies all nodes in the given BDD(s) corresponding to …\nSearch for Node, create if it doesnt exist\nNode List\nParses a BCDD from a .dddmp file.\nParses the nodelist of a BCDD from a .dddmp file.\nInitializes the BDD for a specific variable ordering.\nRemoves nodes which do not belong to the BDD with the …\nRemoves nodes which do not belong to any of the BDDs with …\nReduces the BDD. This changes Node IDs, the new Node ID of …\nDoes the same as clear_c_table, but keeps entries that …\nPerform sifting for every layer containing at least one …\nSwap layer containing specified variable first to the …\nSwaps graph layers of variables a and b. Requires a to be …\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nVariable ordering: var2level[v.0] is the depth of variable …\nFind the variable at specified level\nSet of Views for BDDs in this manager\nWrites a (multi-rooted) BDD and all its views to a .bdd …\nWrites a (multi-rooted) BDD and all its views to a …\nWrites a (multi-rooted) BDD and all its views to a …\nWrites a (multi-rooted) BDD to a .bdd file.\nWrites a (multi-rooted) BDD to a .bdd.json file.\nWrites a (multi-rooted) BDD to a .bdd.xml file.\nCreates an XOR “ladder”\nElement of a BDD. Note that the Node contains its own ID. …\nTerminal node “one”\nTerminal node “zero”\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNode ID. Special values: 0 and 1 for terminal nodes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the function resulting when setting the specified …\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nVariable number. Special variable 0 == terminal nodes\nStrategies for when and how to run DVO during BDD …\nRun one iteration of sifting for all variables, every time …\nAlways perform sifting of all variables until the number of\nCall the underlying strategy if the node count exceeds the …\nImplements run_dvo()\nThis contains all available DVO implementations\nDummy DVO implementation that does nothing\nPerforms sifting until the number of nodes does not change …\nCalls the underlying DVO mode if the specified duration …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis gets called after a CNF clause has been integrated. …\nThis gets called after a CNF clause has been integrated. …\nBring ITE calls of the form ite(f,f,h) = ite(f,1,h) = …\nDVO strategy: When and how to run DVO\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDisplay progress bars for BDD building and DVO progress\nChecks if a specified variable ordering is valid for the …\nReturns the variable order as list of VarID top to bottom\nType aliases for HashMap and HashSet to be used throughout …\nUtility functions/macros\nImplementations of different static variable ordering …\nType alias for a hash map that uses the Fx hashing …\nType alias for a hash set that uses the Fx hashing …\nContains the error value\nContains the error value\nNo value.\nContains the success value\nContains the success value\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStores a BCDD (quiet similar to its representation in the …\nRepresents a parent node, containing the ID of the node. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUtilities for saving the current BDD as a graphviz file …\nSatisfyability count, active nodes count\nView to access a BDD.\nReturns a (new) view on the BDD resulting from connecting …\nCounts how many nodes the BDD consists of.\nCreates a slice of the BDD containing only the given …\nCreates a slice of the BDD containing all except the given …\nEvaluates the BDD, setting all given vars to 1 and all …\nReturns a (new) view on the BDD resulting from applying …\nReturns a (new) view on the BDD resulting from applying …\nReturns the argument unchanged.\nBuild a bdd from dimacs. The BDD is stored in a new …\nGives access to the manager which stores the BDD.\nReturns a HashMap containing for each atomic set that was …\nReturns the VarIDs of the removed variables of this BDD.\nReturns the NodeID of the root node of this BDD.\nGenerate graphviz for the BDD.\nCalls <code>U::from(self)</code>.\nReturns, whether the function represented by this BDD is …\nLoads the BDDs from a .dddmp file.\nReturns a (new) view on a BDD which represents the inverse …\nReturns a BddView for a BDD which represents the function …\nOptimizes the BDD by making use of Atomic Sets. Returns …\nReturns a (new) view on the BDD resulting from connecting …\nReturns the #SAT result for the function represented by …\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns a (new) view on the BDD resulting from connecting …\nBuilds a xor ladder with all variables in the DDManager …\nReturns a BddView for a BDD which represents the function …")