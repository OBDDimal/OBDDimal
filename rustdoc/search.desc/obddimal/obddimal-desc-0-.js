searchState.loadedDescShard("obddimal", 0, "Shortcut for\nBDD building from CNF\nAll BDD building and manipulation functionality\nModule containing type definitions for the elements of the …\nImplementation of dynamic variable ordering techniques\nOptions for BDD building\nUtility functions related to variable order\nBDD reduction\nImplementation of BDD layer swap\nContainer combining the nodes list, unique tables, …\nTerminal node “one”\nTerminal node “zero”\nInsert Node. ID is assigned for nonterminal nodes (var != …\nDetermine order in which clauses should be added to BDD\nInitialize the BDD with zero and one constant nodes\nComputed Table: maps (f,g,h) to ite(f,g,h)\nCollect all nodes that are part of the specified function\nConverts a BCDD to a normal BDD\nCreates a HashTable containing the nodes of a BDD …\nCreates a HashMap containing the node IDs for each layer.\nCreates a HashMap containing information about the parents …\nEnsure var2level vec is valid up to specified variable\nReturns the argument unchanged.\nBuilds a BDD from a CNF read from DIMACS.\nGenerate graphviz for the provided function, not including …\nCalls <code>U::from(self)</code>.\nUnique Table for each variable. Note that the indices into …\nLoads a BDD from a Nodelist (containing all nodes from a …\nLoads a BDD from a Nodelist (containing all nodes from a …\nReads a (multi-rooted) BDD from a .bdd file.\nReads a (multi-rooted) BDD from a .bdd.json file.\nReads a (multi-rooted) BDD and corresponding statistics …\nReads a (multi-rooted) BDD and corresponding statistics …\nReads a (multi-rooted) BDD and corresponding statistics …\nReads a (multi-rooted) BDD from a .bdd.xml file.\nReads a (multi-rooted) BDD and corresponding statistics …\nReads a (multi-rooted) BDD from a .dddmp file.\nFind top variable: Highest in tree according to order\nSearch for Node, create if it doesnt exist\nNode List\nBring ITE calls of the form ite(f,f,h) = ite(f,1,h) = …\nParses a BCDD from a .dddmp file.\nParses the nodelist of a BCDD from a .dddmp file.\nInitializes the BDD for a specific variable ordering.\nReduces the BDD. This changes Node IDs, the new Node ID of …\nPerform sifting for every layer containing at least one …\nSwap layer containing specified variable first to the …\nSwaps graph layers of variables a and b. Requires a to be …\nVariable ordering: var2level[v.0] is the depth of variable …\nFind the variable at specified level\nWrites a (multi-rooted) BDD to a .bdd file.\nWrites a (multi-rooted) BDD to a .bdd.json file.\nWrites a (multi-rooted) BDD to a .bdd.xml file.\nCreates an XOR “ladder”\nElement of a BDD. Note that the Node contains its own ID. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNode ID. Special values: 0 and 1 for terminal nodes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the function resulting when setting the specified …\nVariable number. Special variable 0 == terminal nodes\nStrategies for when and how to run DVO during BDD …\nRun one iteration of sifting for all variables, every time …\nAlways perform sifting of all variables until the number of\nCall the underlying strategy if the node count exceeds the …\nImplements run_dvo()\nThis contains all available DVO implementations\nDummy DVO implementation that does nothing\nPerforms sifting until the number of nodes does not change …\nCalls the underlying DVO mode if the specified duration …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis gets called after a CNF clause has been integrated. …\nThis gets called after a CNF clause has been integrated. …\nDVO strategy: When and how to run DVO\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDisplay progress bars for BDD building and DVO progress\nChecks if a specified variable ordering is valid for the …\nReturns the variable order as list of VarID top to bottom\nType aliases for HashMap and HashSet to be used throuout …\nUtility functions/macros\nImplementations of different static variable ordering …\nType alias for a hashmap using the <code>fx</code> hash algorithm.\nType alias for a hashmap using the <code>fx</code> hash algorithm.\nNo value.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStores a BCDD (quiet similar to its representation in the …\nRepresents a parent node, containing the ID of the node. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUtilities for saving the current BDD as a graphviz file …\nSatisfyability count, active nodes count")