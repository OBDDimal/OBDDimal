initSidebarItems({"enum":[["InputFormat","All the data formats that are currently supported to create a BDD from."]],"fn":[["and_para","Calculates the Boolean AND with the given left hand side `lhs` and the given right hand side `rhs`."],["not_para","Calculates the Boolean NOT of the given value `val`."],["or_para","Calculates the Boolean OR with the given left hand side `lhs` and the given right hand side `rhs`."],["para_add_node_to_unique","Adds a `NodeType` to the `unique_table`, if it is not already there."],["para_add_node_to_unique_enhanced","Adds a `NodeType` to the `unique_table`, if it is not already there. This adds a node to a specific `unique_table` in a vector of `unique_table`s."],["para_ite","Calculates the ITE function. Basically works the same way as `ite` does, it just branches on every recursion step by using `reyon::join`. "],["para_restrict","Does the same as `restrict` but works with an vector of unique_tables."]],"struct":[["Bdd","Represents a wrapper struct for a BDD, allowing us to query methods on it."],["ComputedKey","Used as the key for the computed_table."],["UniqueKey","Used as key for the unique_table, containing the variable for the node `tv: i64` and references to: `low: Arc<NodeType>` and `high: Arc<NodeType>`"]],"type":[["UniqueTable",""]]});